@SuppressWarnings("determinism") // method parameters can't be @OrderNonDet so @PolyDet("up") is the same as @PolyDet
@SuppressWarnings("determinism") // iterated collection can't be @OrderNonDet so @PolyDet("up") is the same as @PolyDet
@SuppressWarnings("determinism") // iterating over @OrderNonDet collection to modify another
@SuppressWarnings("determinism") // iterating over @PolyDet collection to modify another
@SuppressWarnings("determinism") // iterating over @PolyDet collection to create another
@SuppressWarnings("determinism") // iterating over @OrderNonDet collection to create another
@SuppressWarnings("determinism") // process is order insensitive, but can't be verified
@SuppressWarnings("determinism") // process is order insensitive, so safe to treat @PolyDet("up") as @PolyDet
@SuppressWarnings("determinism") // order of insertion doesn't matter
@SuppressWarnings("determinism") // all instances of this class are @NonDet, so @NonDet should be treated the same as @PolyDet
@SuppressWarnings("determinism") // addAll requires @PolyDet("down") but not in the case of just making a copy
@SuppressWarnings("determinism") // no unintended aliasing, so addAll can take @PolyDet
@SuppressWarnings("determinism") // no unintended aliasing, so addAll can take @OrderNonDet
@SuppressWarnings("determinism") // no unintended aliasing, so assignment valid
@SuppressWarnings("determinism") // no unintended aliasing, so safe to treat @Det values as @PolyDet
@SuppressWarnings("determinism") // this is code randoop is run on
@SuppressWarnings("determinism") // this is from code randoop is run on, so okay to have nondet toString
@SuppressWarnings("determinism") // the toString of a PrintStream is @PolyDet
@SuppressWarnings("determinism") // need to treat @Det collection as @PolyDet
@SuppressWarnings("determinism") // can't create an @OrderNonDet HashSet here apparently
@SuppressWarnings("determinism") // casting here doesn't change the determinism type
@SuppressWarnings("determinism") // overriding JDK method but need to be more precise
@SuppressWarnings("determinism") // type is immutable, so safe to treat @Det as a subtype of @PolyDet
@SuppressWarnings("determinism") // getComponentType is annotated as returning @Det, when it should be @PolyDet in the JDK
@SuppressWarnings("determinism") // all concrete implementation of type of a deterministic toString
@SuppressWarnings("determinism") // method not annotated in JDK but probably returns @PolyDet
@SuppressWarnings("determinism") // second argument expects @OrderNonDet becaus of Map annotation
@SuppressWarnings("determinism") // varargs can't be @OrderNonDet so @PolyDet("up") same as @PolyDet
@SuppressWarnings("determinism") // the annotation for this library method is wrong
@SuppressWarnings("determinism") // this toString call is probably @PolyDet
@SuppressWarnings("determinism") // iterating over a @PolyDet("down") collection should give @PolyDet elements
@SuppressWarnings("determinism") // @PolyDet("use") same as @PolyDet so for each loop assignment compatible
@SuppressWarnings("determinism") // The fact the function requiredEntry is @Det is clearly not an issue
@SuppressWarnings("determinism") // can pass @Det receiver to @PolyDet method setUpperBound here because no chance of aliasing.
@SuppressWarnings("determinism") // method doesn't mutate so safe to call
@SuppressWarnings("determinism") // empty list clearly assignable to anything
@SuppressWarnings("determinism") // empty collection clearly assignable to anything
@SuppressWarnings("determinism") // okay to treat cache as @PolyDet
@SuppressWarnings("determinism") // this is a parameter with @RequiresDetString
@SuppressWarnings("determinism") // Tree set constructed from HashSet should be @PolyDet("down")
@SuppressWarnings("determinism") // library not annotated
@SuppressWarnings("determinism") // @PolyDet not instantiated correctly in type arguments here
@SuppressWarnings("determinism") // only printed in exceptional circumstances
@SuppressWarnings("determinism") // Arrays.toString deterministic in this case
@SuppressWarnings("determinism") // collection clearly sorted above, so deterministic
@SuppressWarnings("determinism") // we consider file operations to be deterministic
@SuppressWarnings("determinism") // impossible to verify toString on interface
@SuppressWarnings("determinism:nondeterministic.tostring") // this toString call is @Det; value is a primitive or String (see comment on field)
@SuppressWarnings("determinism:override.return.invalid") // Other classes that override evaluate() return @PolyDet("up") like the super class. This method calls JDK hashCode()
@SuppressWarnings("determinism:override.return.invalid") // Other classes that override getName() return @PolyDet like the super class. This method returns @NonDet
@SuppressWarnings("determinism:override.return.invalid") // Other classes that override execute() return @NonDet like the super class. This method returns @PolyDet
@SuppressWarnings("determinism:override.return.invalid") // Other classes that override execute() return @NonDet like the super class. This method returns @Det
@SuppressWarnings("determinism:override.return.invalid") // Other classes that override toParsableString() return @PolyDet like the super class. This method returns @NonDet
@SuppressWarnings("determinism:invalid.array.assignment")  // iterating over @PolyDet array to create another
@SuppressWarnings("determinism") // @PolyDet not resolved correctly with @PolyDet("upDet")
@SuppressWarnings("determinism") // may create bad alias but fine because only used temporarily here
@SuppressWarnings("determinism") // get for @PolyDet("upDet") should be @PolyDet("down")
@SuppressWarnings("determinism") // .class expressions are clearly deterministic
@SuppressWarnings("determinism") // creating @PolyDet aliases to @Det instances, but okay because all immutable classes
@SuppressWarnings("determinism") // okay to call @PolyDet method on @Det value when not mutated
@SuppressWarnings("determinism") // Class<? extends @Det Object? and Class<? extends @NonDet Object> are the same
@SuppressWarnings("determinism") // @PolyDet for operations on a @PolyDet("upDet") Map not resolved correctly
@SuppressWarnings("determinism") // @PolyDet("use") same as @PolyDet in type parameters here
@SuppressWarnings("determinism") // this might log something non-deterministic, but could never verify
@SuppressWarnings("determinism") // this may produce non-deterministic output, but have to make this method take @PolyDet to override this method
@SuppressWarnings("determinism") // error in assertion but doesn't matter
@SuppressWarnings("determinism") // since constructed with empty list, expression is deterministic
@SuppressWarnings("determinism") // AccessibleObject toString is actually deterministic

@SuppressWarnings("determinism") // logging the environment is expected nondeterminism
@SuppressWarnings("determinism") // the nondeterministic output printed here is expected

// For generic array issue
@SuppressWarnings("determinism") // https://github.com/typetools/checker-framework/issues/3277

// For when there's an error on a collection in an extends/implements clause
@SuppressWarnings("determinism") // https://github.com/t-rasmud/checker-framework/issues/134

// For exception
@SuppressWarnings("determinism") // https://github.com/t-rasmud/checker-framework/issues/116

// For upper bounds on inner classes
@SuppressWarnings("determinism") // https://github.com/t-rasmud/checker-framework/issues/123

// For @PolyDet being treated from @PolyDet("use") in upper bounds
@SuppressWarnings("determinism") // https://github.com/t-rasmud/checker-framework/issues/143

// For @PolyDet("") related errors
@SuppressWarnings("determinism") // https://github.com/t-rasmud/checker-framework/issues/147

// For issue with Class<?> arrays
@SuppressWarnings("determinism") // https://github.com/typetools/checker-framework/issues/3277

// For loop issue
@SuppressWarnings("determinism") // https://github.com/t-rasmud/checker-framework/issues/168

@SuppressWarnings("determinism") // The getInterfaces call in the loop is
// @OrderNonDet, but upon inspection it seems the logic is independent of order.

// For collection check on classes
@SuppressWarnings("determinism") // https://github.com/t-rasmud/checker-framework/issues/134

// For constructor error
@SuppressWarnings("determinism") // https://github.com/t-rasmud/checker-framework/issues/179
